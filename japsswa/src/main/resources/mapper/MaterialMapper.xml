<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.mes.jss.material.mapper.MaterialMapper">
	
	 		
    	
    	<sql id="search">
    		<where>
              	 <if test=" storeReasonType != null and storeReasonType != ''.toString()">    
                  	store_reason_type like '%'||#{storeReasonType}||'%'
                  </if>
                  
                  <if test="itemType != null and itemType != ''.toString()">   
                   	 and item_type like '%'||#{itemType}||'%'
                     
                  </if>
                  
                  <if test="storeDate1 != null and storeDate2 != null ">   
                  	 and store_date between #{storeDate1} and #{storeDate2} 
                  	 
                  </if>
                  
                   <if test="mrSearch != null and mrSearch != ''.toString()">  
                   	 and item_name like '%'||#{mrSearch}||'%'
                     
                  </if>

      </where>
    		
    	
    	
    	</sql> 		
	
   <!-- 출고 다중 검색 조건 -->
   	
   		<sql id="searchRelease">
    		<where>
              	 <if test=" mrRealReasonType != null and mrRealReasonType != ''.toString()">
                  	MR_REAL_REASON_TYPE like '%'||#{mrRealReasonType}||'%'
                  </if>
                  
                  <if test="itemType != null and itemType != ''.toString()">
                   	 and item_type like '%'||#{itemType}||'%'
                     
                  </if>
                  
                  <if test="mrRealDate1 != null and mrRealDate2 != null ">
                  	 and MR_REAL_DATE between #{mrRealDate1} and #{mrRealDate2}
                  	 
                  </if>
                  
                   <if test="mrSearch != null and mrSearch != ''.toString()">
                   	 and item_name like '%'||#{mrSearch}||'%'
                     
                  </if>
      </where>
   	
   		</sql>
   
   
   
   
   
  		
   
   
    <select id="MrStoreList" resultType="MrVO" parameterType="MrVO">
    	select *
    	from material m join itemlist i on (m.item_code = i.item_code) join emp e on(m.emp_no = e.emp_no) 
    	
    	<include refid="search"></include> 
   		
   		
    </select>
  		
  		
  		
  	<!-- 출고 내역 검색 -->
  	
  	<select id="MrRelQuery" resultType="MrReleaseVO" parameterType="MrReleaseVO">
  		select *
  		from material m join material_release r on(m.mr_lot_number = r.mr_lot_number) join itemlist i on (r.item_code = i.item_code)
 		
 		<include refid="searchRelease"></include> 	
  	
  	</select>	
  		
  		
  		
  		
  		
  	<!-- 자재 리스트 -->
  	
  		<select id="getList" resultType="MrVO">
  		
  		select GET_CODENAME(i.item_type) item_type,
  		       m.mr_lot_number,
  		       i.item_name,
  		       m.item_code,
  		       i.item_name,
  		       e.emp_name,
  		       m.expire_date,
  		       m.store_date,
  		       m.store_count,
  		       m.store_reason_type,
  		       m.store_reason_code 
  		 from emp e 
  		 join material m on (e.emp_no=m.emp_no) 
  		 join itemlist i on (m.item_code=i.item_code) 
  		where to_char(store_date,'yyMMdd') = to_char(sysdate,'yyMMdd')
  		
  		
  		</select>  
  	
  	
  	
  	<!-- 자재 멀티 검색 -->
  	
  	<select id="MrCountMulti" parameterType="MrVO"  resultType="MrVO">
  	
  		select i.item_code, 
  		       i.item_name, 
  		       GET_CODENAME(i.item_type) item_type,   <!-- 공통코드를 통해 데이터는 코드로 저장 되나 거기에 대한 내용이 보이도록  -->
  		       i.save_material, 
  		       sum(store_count) as total 
  		  from itemlist i join material m on(i.item_code = m.item_code)
  		<where>
  			<if test="div ==''">    <!-- 전체 검색 -->
  				(i.item_type ='MAT' or i.item_type ='SAM') and i.item_name like '%'||#{itemName}||'%'
  			
  			</if>
  			
  			
  			
  			
  			<if test="div =='MAT'">   <!-- 자재 검색 -->
  				i.item_type ='MAT' and i.item_name like '%'||#{itemName}||'%'
  			
  			</if>
  			
  			<if test="div =='SAM'">
  				and i.item_type='SAM' and i.item_name like '%'||#{itemName}||'%'
  			
  			</if>
  		</where>
  		 group by i.item_code, i.item_name,item_type, i.save_material
  	
  	</select>
  		
  		
  		
  	<!-- 자재 조회 리스트(총) -->
  	<select id="mrInvenCount" resultType="MrVO">
  	
  	 select item_code, 
  		      item_name, 
  		       GET_CODENAME(item_type) item_type, 
  		       save_material, 
  		       sum(store_count) as total 
  		  from itemlist 
  		  join material  using(item_code) 
  		 group by item_code, item_name, item_type, save_material
  		 
  	</select>
  	
  	
  	<!-- 반제품 조회 리스트 -->
  	<select id="halfInven" resultType="MrVO">
  	
  	   select item_code, 
  		       item_name, 
  		       GET_CODENAME(item_type) item_type, 
  		       save_material, 
  		       sum(store_count) as total 
  		  from itemlist 
  		  join material using(item_code)
  		  where item_type ='SAM' 
  		 group by item_code, item_name, item_type, save_material
  		 
  	</select>
  	
  	
  	<!-- 자재 조회 리스트 -->
  	
  	<select id="matInven" resultType="MrVO">
  		
  		select item_code, 
  		       item_name, 
  		       GET_CODENAME(item_type) item_type, 
  		       save_material, 
  		       sum(store_count) as total 
  		  from itemlist 
  		  join material using(item_code)
  		  where item_type ='MAT' 
  		 group by item_code, item_name, item_type, save_material
  	
  	
  	</select>
  	
  	<!-- 자재 검색 -->
  	<select id="searchMr" resultType="MrVO">
		select * from material  
			
  	
  	
  	
  	
  	</select>
  	
  
  	
  	
  	
  	
  	<!-- 안전재고 미달 리스트 -->
  	
  		<select id="getMrCount" resultType="MrVO">
  		select i.item_code, 
  	   i.item_name, 
       c.customer_id,
       c.customer_name,
       i.item_price,
       GET_CODENAME(i.item_type) item_type, 
       i.save_material, 
  	     sum(m.store_count) as total 
        from customer c join contract co on(c.CUSTOMER_ID = co.CUSTOMER_ID) join itemlist i 
          on(co.item_code = i.item_code)
  		  join material m on(i.item_code = m.item_code)
  		   		 
  		 group by c.customer_id, c.customer_name, i.item_price, i.item_code, i.item_name, i.item_type, i.save_material
  		 having i.save_material > sum(m.store_count)
  		
  		</select>
  	
  	
  	<!-- 안전 재고 검색 -->	
  	
  		<select id="codeList" parameterType="MrVO" resultType="MrVO">
  			
  			select i.item_code, 
  	   i.item_name, 
       c.customer_id,
       c.customer_name,
       i.item_price,
       GET_CODENAME(i.item_type) item_type, 
       i.save_material, 
  	     sum(m.store_count) as total 
        from customer c join contract co on(c.CUSTOMER_ID = co.CUSTOMER_ID) join itemlist i 
          on(co.item_code = i.item_code)
  		  join material m on(i.item_code = m.item_code)
  		 where i.item_name = #{keyword}  		 
  		 group by c.customer_id, c.customer_name, i.item_price, i.item_code, i.item_name, i.item_type, i.save_material
  		 having i.save_material > sum(m.store_count)
  		
  		</select>
  		
  		
  		
  		
  		 
  		 <!-- 자재 lot 재고 -->
  		 <select id="MrLotList" resultType="MrVO">
  		 	select m.mr_lot_number,i.item_name,GET_CODENAME(i.item_type) item_type,m.store_count,m.expire_date
  		 	from material m join itemlist i on(m.item_code=i.item_code)
  		 	where i.item_name = #{itemName}
  		 
  		 
  		 
  		 </select>
  		 
  		 
  		 
  		 
  		 
  		 
  		 
  	<!-- 자재 lot 재고 리스트 -->
  		<select id="getMrLotCount"	resultType="MrVO">
  			select m.mr_lot_number, i.item_name, GET_CODENAME(i.item_type) item_type,sum(store_count) as total, m.expire_date   
  			from material m join itemlist i on(m.item_code = i.item_code)
  			group by mr_lot_number, item_name, item_type, expire_date
  			
  			
  		
  		</select>
  		
  		
  		
  		<sql id="searchInsert">
    		
              	 <if test=" itemType != null and itemType != ''.toString()">
                  and	item_type like '%'||#{itemType}||'%'
                  </if>
                  
                  <if test="storeReasonType != null and storeReasonType != ''.toString()">
                   	 and store_reason_type like '%'||#{storeReasonType}||'%'
                     
                  </if>
                                   
                  
                   <if test="mrSearch != null and mrSearch != ''.toString()">
                   	 and item_name like '%'||#{mrSearch}||'%'
                     
                  </if>
      
   	
   		</sql>
  		
  		
  	
  		
  		
  	
  	<!-- 입고 확인 검색 -->	
  		<select id="mrStoreQuery" resultType="MrVO">
  		
  		select m.mr_lot_number,i.item_code,i.item_name,e.emp_name,substr(to_char(m.store_date,'yy-MM-dd'),3,10),m.store_count,m.expire_date,m.store_reason_type,m.store_date
  		from material m join itemlist i on(m.item_code = i.item_code)
  		join emp e on(m.emp_no = e.emp_no) 
  		
  		
  		<include refid="searchInsert"></include> 
  			
  			
  		</select>
	
	
	<!-- 자재 재고 확인 -->	
		<select id="mrCountList" resultType="MrVO">
		
			select distinct i.item_name,
			GET_CODENAME(i.item_type) item_type,
			(select sum(store_count) 
			from material m 
			join itemlist i on(m.item_code = i.item_code)
			 where i.item_name = #{keyword}) total,
			 i.save_material
           	 from material m 
           	 join itemlist i 
           	 on(m.item_code = i.item_code) 
           	 where i.item_name = #{keyword} 
		</select>
		
	
	<!-- 자재 입고 내역 -->
		<select id="storeGetList" resultType="MrVO">
		
			select 
  		       m.mr_lot_number,
  		       GET_CODENAME(i.item_type) item_type,
  		       m.item_code,
  		       i.item_name,
  		       e.emp_name,
  		   m.expire_date, 
  		       m.store_date,
  		       m.store_count,
  		       m.store_reason_type,
  		       m.store_reason_code 
  		 from emp e 
  		 join material m on (e.emp_no=m.emp_no) 
  		 join itemlist i on (m.item_code=i.item_code)
  		 order by m.store_date desc 
  		
			
		</select>	
		
	
	<!-- 자재 품질 입고 내역 -->
		<select id="MrQuality" resultType="MrVO">
			select 
  		       m.mr_lot_number,
  		       GET_CODENAME(i.item_type) item_type,
  		       m.item_code,
  		       i.item_name,
  		       e.emp_name,
  		       m.expire_date,
  		       m.store_date,
  		       m.store_count,
  		       m.store_reason_type,
  		       m.store_reason_code 
  		 from emp e 
  		 join material m on (e.emp_no=m.emp_no) 
  		 join itemlist i on (m.item_code=i.item_code)
  		 where m.store_reason_type ='발주'
  		 order by m.store_date desc
		
		</select>	
	
	<!-- 자재 생산 입고 내역 -->
		<select id="MrPro" resultType="MrVO">
			select 
  		       m.mr_lot_number,
  		       GET_CODENAME(i.item_type) item_type,
  		       m.item_code,
  		       i.item_name,
  		       e.emp_name,
  		       m.expire_date,
  		       m.store_date,
  		       m.store_count,
  		       m.store_reason_type,
  		       m.store_reason_code 
  		 from emp e 
  		 join material m on (e.emp_no=m.emp_no) 
  		 join itemlist i on (m.item_code=i.item_code)
  		 where m.store_reason_type ='생산'
  		 order by m.store_date desc
		
		</select>
		
	<!-- 자재 조정 입고 내역 -->
		<select id="MrAdm" resultType="MrVO">
			select 
  		       m.mr_lot_number,
  		       GET_CODENAME(i.item_type) item_type,
  		       m.item_code,
  		       i.item_name,
  		       e.emp_name,
  		       m.expire_date,
  		       m.store_date,
  		       m.store_count,
  		       m.store_reason_type,
  		       m.store_reason_code 
  		 from emp e 
  		 join material m on (e.emp_no=m.emp_no) 
  		 join itemlist i on (m.item_code=i.item_code)
  		 where m.store_reason_type ='조정'
  		 order by m.store_date desc
		
		</select>		
		
				

	
	<!-- 자재 입고 -->	
		<select id="StoreIn" statementType="CALLABLE">
			{call MR_INSERT(
				#{testCode, mode=IN, jdbcType=VARCHAR}
				
			
			)
		}
				
		</select>
				
	<!-- 자재 입고 삭제 -->
		<select id="deleteMr" statementType="CALLABLE">
			{call mr_store_delete(
				#{mrLotNumber, mode=IN, jdbcType=VARCHAR}
			)			
			}
				
		</select>	
  		
  	<!-- 생산 실적 리스트 -->
  		<select id="mrPerList" resultType="PerformanceVO">
  			select p.performance_id, 
  			p.wdetail_id, 
  			p.item_code, 
  			p.wbom_id, 
  			p.fac_code,
  			p.output,
  			p.pass_item,
  			p.fail_item,
  			p.start_time,
  			p.end_time,
  			p.worker,
  			GET_CODENAME(i.item_type) item_type,
  			i.item_name
 			from material m 
 			right outer join performance p on(m.store_reason_code = p.performance_id) join itemlist i on(p.item_code=i.item_code)
 			where m.store_reason_code is null and i.item_type ='SAM' and p.end_time is not null and p.output != p.fail_item
 
  			
  		
  		</select>	
  		
  	<!-- 자재 출고 내역 -->
  	
  		<select id="RelGetList" resultType="MrReleaseVO">
  			
  			select r.mr_real_code,
  			i.item_code,
  			GET_CODENAME(i.item_type) item_type,
  			i.item_name,r.mr_lot_number,
  			r.mr_real_count,
  			r.mr_real_reason_type,
  			r.mr_real_reason_code,
  			r.mr_real_date
  			from material_release r join itemlist i on(r.item_code=i.item_code) 
  			
  		</select>
  				
  	<!-- 자재 출고 생산 리스트 -->
  		
  		<select id="MrRelPro" resultType="MrReleaseVO">
  			
  			select r.mr_real_code,
  			i.item_code,
  			GET_CODENAME(i.item_type) item_type,
  			i.item_name,
  			r.mr_lot_number,
  			r.mr_real_count,
  			r.mr_real_reason_type,
  			r.mr_real_reason_code,
  			r.mr_real_date 
  			from material_release r join itemlist i on(r.item_code=i.item_code) 
  			where r.mr_real_reason_type='생산'
  			
  		</select>	
  		
  	<!-- 자재 출고 조정 리스트 -->
  	
  		<select id="MrRelAdm" resultType="MrReleaseVO">
  			
  			select r.mr_real_code,
  			i.item_code,
  			GET_CODENAME(i.item_type) item_type,
  			i.item_name,
  			r.mr_lot_number,
  			r.mr_real_count,
  			r.mr_real_reason_type,
  			r.mr_real_reason_code,
  			r.mr_real_date 
  			from material_release r join itemlist i on(r.item_code=i.item_code)
  			where r.mr_real_reason_type='조정'
  			
  		</select>	
  			
  		
  	<!-- 반제품 입고 -->	
  		<select id="halfInsert" statementType="CALLABLE">
  			{call half_mr_insert(
  				#{performanceId, mode=IN, jdbcType=VARCHAR},
  				#{itemCode, mode=IN, jdbcType=VARCHAR},
  				#{passItem, mode=IN, jdbcType=VARCHAR}
  				
  			)
  		
  		}
  		
  		</select>
  		
  	<!-- 거래처 리스트 -->	
  		<select id="customerList" resultType="CustomerVO">
  			select c.customer_id, 
  			c.customer_name, 
  			i.item_name,
  			i.item_code,
  			i.item_price 
  			from customer c 
  			join contract t on(c.customer_id = t.customer_id) join itemlist i on(t.item_code=i.item_code)
  			
  			
  		
  		</select>
  		
  		
  	<!-- 거래처 검색 -->	
  		<select id="searchcustomer" resultType="CustomerVO">
  			select c.customer_id, 
  			c.customer_name, 
  			i.item_name,
  			i.item_code,
  			i.item_price 
  			from customer c 
  			join contract t on(c.customer_id = t.customer_id) 
  			join itemlist i on(t.item_code=i.item_code)
  			where c.customer_name = #{result}
  		</select>
  
  
  <!-- 발주 조회용 리스트 검색 -->
  
  <sql id="orderSearch1">
  			<where>
  			 
  	           q.situation = '검사대기'
  			<if test=" customerName != null and customerName != ''.toString()">
                   and customer_name like '%'||#{customerName}||'%'
                  </if>
                 
                  <if test="  mrOrderDate1 != null and mrOrderDate2 != null ">
                  	 and mr_order_date between #{mrOrderDate1} and #{mrOrderDate2}
                  	 
                  </if>
                  
  			
  			
  			
  			</where>
  		
  		
  		
  		</sql>
  
  <select id="orderBeforeDelete" parameterType="MrorderVO"  resultType="MrorderVO">
  
  select    o.mr_order_date,
  			o.mr_order_code,
  			c.customer_id,
  			c.customer_name,
  			e.emp_name,
  			o.product_count,
  			o.all_count 
  			from customer c 
  			join material_order o on(c.customer_id = o.customer_id) 
  			join emp e on(o.emp_no=e.emp_no)
  			join material_order_detail d on (o.mr_order_code = d.mr_order_code)
  			join quality_test q on (d.mr_order_det_code = q.mr_order_det_code)
            
            <include refid="orderSearch1"></include>
  </select>
  	
  <!-- 발주 상세 프로시저-->
  		<select id="orderInsert" statementType="CALLABLE">
  		
  			{call MR_ORDER_DETAIL(
  				#{itemCode, mode=IN, jdbcType=VARCHAR},
  				#{mrCount, mode=IN, jdbcType=VARCHAR},
  				#{itemPrice, mode=IN, jdbcType=VARCHAR},
  				#{deliveryDate, mode=IN, jdbcType=VARCHAR}
  				)	
  			}
  		</select>
  
  		
  	<!-- 발주 프로시저 -->	
  		<select id="mrorderInsert" statementType="CALLABLE">
  			{call MR_ORDER(
  				#{vo.getList().get(0).customerId, mode=IN, jdbcType=VARCHAR}
  				
  			
  			)
  		}
  		</select>
  		
  	<!--  발주취소 -->	
  		<select id="mrOrderDelete" statementType="CALLABLE">
  			{call mr_order_delete(
  				#{mrOrderCode, mode=IN, jdbcType=VARCHAR}
  			
  			)
  			}
  			
  		
  		
  		</select>
  		
  		
  <sql id="orderSearch">		
  	<where>
  			<if test="div == 'cu'">
  				 customer_name like '%'||#{customerName}||'%'
  				
  			
  			</if>
  			<if test="div =='mr'">
  				and item_name like '%'||#{itemName}||'%'
  			
  			</if>
  		</where>
  	
  	</sql>	
  	
  	<select id="cusMrQuery" parameterType="CustomerVO" resultType="CustomerVO">
  		
  			select c.customer_id, 
  			c.customer_name, 
  			i.item_name,
  			i.item_code,
  			i.item_price 
  			from customer c 
  			join contract t on(c.customer_id = t.customer_id) 
  			join itemlist i on(t.item_code=i.item_code)
  		
  			<include refid="orderSearch"></include>
  	
  	</select>
  	
  	<!-- 발주 내역 검색 -->
  	
  	<sql id="ordersSearch1">		
  	<where>
  			<if test="customerName != null">
  				and c.customer_name like '%'||#{customerName}||'%'
  				
  			
  			</if>
  			
  			<if test="itemName != null">
  				and i.item_name like '%'||#{itemName}||'%'
  			</if>
  			
  			<if test="mrOrderDate1 != null and mrOrderDate2 != null">
  			   
  			   and o.mr_order_date between #{mrOrderDate1} and #{mrOrderDate2}
  			
  			</if>
  		</where>
  	
  	</sql>	
  	
  	<select id="ordersSearch" parameterType="MrOrderVO" resultType="MrOrderVO">
  	    
  		select o.mr_order_date,
  			o.mr_order_code,
  			c.customer_id,
  			c.customer_name,
  			e.emp_no,
  			e.emp_name,
  			o.product_count,
  			o.all_count 
  			from customer c 
  			join material_order o on(c.customer_id = o.customer_id) 
  			join emp e on(o.emp_no=e.emp_no)
  			join material_order_detail m on(o.mr_order_code = m.mr_order_code)
  			join itemList i on(i.item_code = m.item_code)
  			
  			<include refid="ordersSearch1"></include> 
  		
  	
  	
  	</select>
  	
  	
  	<!-- 조정 될 리스트 -->	
  		<select id="mrAdGetList" resultType="MrAdjustmentVO">
  		
  		 select i.item_code,
  		  i.item_name,
  		  m.store_count, 
  		  sum(r.mr_real_count) as totalRel,
  		  m.mr_lot_number,
  		  i.save_material
			from itemlist i 
			 join material m on(i.item_code = m.item_code)
             left outer join material_adjustment a on(m.mr_lot_number = a.mr_lot_number)
			join material_release r on(m.mr_lot_number=r.mr_lot_number)
            
			where m.hold_count = m.store_count
            and a.adjustment_code is null
            
            group by i.item_code,i.item_name, m.store_count,m.mr_lot_number, i.save_material
			
  		 
  		</select>
  	
  	 	
  	
  	
  	<!-- 조정 리스트 -->		
  		<select id="admGetList" resultType="MrAdjustmentVO">
  			select a.adjustment_code,m.mr_lot_number,i.item_code,GET_CODENAME(i.item_type) item_type,i.item_name,a.register_date, a.process,a.change,a.adjustment_date,a.emp_no,
  			a.adm_note
  			from material_adjustment a join material m on(a.mr_lot_number = m.mr_lot_number) join itemlist i on (m.item_code = i.item_code) 
  			order by a.register_date desc
  		</select>
  		
  		
  		<select id="mrAdmFull" resultType="MrAdjustmentVO">
  			select a.adjustment_code,m.mr_lot_number,i.item_code, GET_CODENAME(i.item_type) item_type,i.item_name,a.register_date, a.process,a.change,a.adjustment_date,a.emp_no,
  			a.adm_note
  			from material_adjustment a join material m on(a.mr_lot_number = m.mr_lot_number) join itemlist i on (m.item_code = i.item_code)
  			
  			order by a.register_date desc
  		
  		
  		</select>
  		
  
  
  	<!-- 조정 찾기 리스트 -->
  		<select id="mrAdSearch" resultType="MrAdjustmentVO">
  		
  			select m.mr_lot_number, i.item_code, GET_CODENAME(i.item_type) item_type, i.item_name, m.store_count
			from material m join itemlist i on (m.item_code=i.item_code)
			where i.item_type in('MAT','SAM')
  		
  		
  		
  		
  		</select>
  
  	
  	<!-- 조정 lot 검색 -->
  	
  		<sql id="lotSearch">
  		
  			<where>
  			   i.item_type in('MAT','SAM')
  			   <if test="mrLot = 'all'">
  			   and (m.mr_lot_number like '%'||#{itemName}||'%'
  			   or i.item_name like '%'||#{itemName}||'%')
  			   
  			   
  			   </if>
  				<if test="mrLot == 'LOT'">
  				and m.mr_lot_number like '%'||#{itemName}||'%'
  				
  			
  				</if>
  			
	  			<if test="mrLot == 'MAT'">
	  				and i.item_name like '%'||#{itemName}||'%'
	  			</if>
	  			
	  			
  			
  			
  			
  			</where>		
  		
  		
  		
  		</sql>
  
  	<select id="mrAdmLot" parameterType="MrAdjustmentVO" resultType="MrAdjustmentVO" >
  		
  			select m.mr_lot_number, i.item_code, GET_CODENAME(i.item_type) item_type, i.item_name, m.store_count
			from material m join itemlist i on (m.item_code=i.item_code)
			
			
			<include refid="lotSearch"></include>
  	
  	</select>
  
  
  
  	<!-- 조정 등록 -->
  		<select id="adjInsert" statementType="CALLABLE">
  			{call ad_insert(
  				#{mrLotNumber, mode=IN, jdbcType=VARCHAR}
  			
  			)
  			}
  		</select>
  	
  	<!-- 입고, 출고량 가져오기 -->
  		<select id="mrAdmInRel" resultType="MrAdjustmentVO">
  			
  			select m.store_count,r.real_count
  			from material m join material_release r on (m.mr_lot_number = r.mr_lot_number)
  		
  		</select>
  	
  	
  	
  	<!-- 조정 직접 등록 -->
  		<select id="realIn" statementType="CALLABLE">
  			{call ad_real_insert(
  				#{mrLotNumber, mode=IN, jdbcType=VARCHAR}
  			
  			)
  			}
  		
  		</select>
  	
  	
  	
  	<!-- 조정 입고 -->
  		<select id="admInsert" statementType="CALLABLE">
  			{call ad_In(
  				#{mrLotNumber, mode=IN, jdbcType=VARCHAR},
  				#{adjustmentCode, mode=IN, jdbcType=VARCHAR}
  				
  			
  			)
  			
  			}
  			
  		
  		</select>
  		
  	<!-- 조정 출고 -->	
  		<select id="adjRelease" statementType="CALLABLE">
  			{call ad_rel(
  					#{mrLotNumber, mode=IN, jdbcType=VARCHAR},
  					#{adjustmentCode, mode=IN, jdbcType=VARCHAR}
  			
  			
  			)
  			
  			}
  			
  		
  		</select>
  		
  		
  	<!-- 조정 삭제 -->
  		<select id="admDelete" statementType="CALLABLE">
  			{call mr_ad_delete(
  				#{adjustmentCode, mode=IN, jdbcType=VARCHAR}
  			
  			
  			)}
  			
  		</select>
  	
  	<!-- 조정 수량 조정 -->	
  		<select id="admCountChange" statementType="CALLABLE">
  			{call adm_count_change(
  				#{adjustmentCode, mode=IN, jdbcType=VARCHAR},
  				#{mrLotNumber, mode=IN, jdbcType=VARCHAR},
  				#{process, mode=IN, jdbcType=VARCHAR},
  				#{change, mode=IN, jdbcType=VARCHAR},
  				#{itemCode, mode=IN, jdbcType=VARCHAR}
  			)
  			}
  		
  		</select>	
  		
  	<sql id="searchAdjustment">
    		<where>
              	 <if test=" process != null and process != ''.toString()">
                  	process like '%'||#{process}||'%'
                  </if>
                  
                  <if test="itemType != null and itemType != ''.toString()">
                   	 and item_type like '%'||#{itemType}||'%'
                     
                  </if>
                  
                  <if test="mrAdDate1 != null and mrAdDate2 != null ">
                  	 and adjustment_date between #{mrAdDate1} and #{mrAdDate2}
                  	 
                  </if>
                  
                   <if test="mrSearch != null and mrSearch != ''.toString()">
                   	 and item_name like '%'||#{mrSearch}||'%'
                     
                  </if>

      </where>
    		
    	
    	
    	</sql> 			
  		
  		
  	<!-- 자재 조정 검색 -->	
  		<select id="mrAdmSearchQuery" parameterType="MrAdjustmentVO" resultType="MrAdjustmentVO">
  			
  			select a.adjustment_code,m.mr_lot_number,i.item_code,i.item_type,i.item_name,a.register_date, a.process,a.change,a.adjustment_date,a.emp_no,
  			a.adm_note
  			from material_adjustment a join material m on(a.mr_lot_number = m.mr_lot_number) join itemlist i on (m.item_code = i.item_code) 
  		
  			
  			<include refid="searchAdjustment"></include>
  			
  		</select> 
  		
  		
  		
  		
  <!-- 발주 조회용 리스트 -->		
  	<select id="MrOrmGetList" resultType="MrOrderVO">
  		
  		select o.mr_order_date,
  			o.mr_order_code,
  			c.customer_id,
  			c.customer_name,
  			e.emp_name,
  			o.product_count,
  			o.all_count 
  			from customer c 
  			join material_order o on(c.customer_id = o.customer_id) 
  			join emp e on(o.emp_no=e.emp_no)
  			join material_order_detail d on (o.mr_order_code = d.mr_order_code)
  			 join quality_test q on (d.mr_order_det_code = q.mr_order_det_code)
            where q.situation = '검사대기'
  			 
  	
  	
  	</select>	
  		
  		
  		
  		
  		
  <!-- 발주 리스트 -->		
  		<select id="OrmGetList" resultType="MrOrderVO">
  		
  			select o.mr_order_date,
  			o.mr_order_code,
  			c.customer_id,
  			c.customer_name,
  			e.emp_no,
  			e.emp_name,
  			o.product_count,
  			o.all_count 
  			from customer c 
  			join material_order o on(c.customer_id = o.customer_id) 
  			join emp e on(o.emp_no=e.emp_no) 
  		</select>
  
  
  
  
  <!-- 발주 상세 리스트 -->		
  		<select id="OrdGetList" resultType="MrOrderDetailVO">
  		
  			select m.mr_order_date,
  			m.mr_order_code,
  			d.mr_order_det_code, 
  			c.customer_id,
  			c.customer_name,
  			i.item_code,
  			i.item_name,
  			d.mr_count,
  			d.mr_price,
  			d.price_total,
  			d.delivery_date,
  			e.emp_name
  			from customer c 
  			join material_order m on(c.customer_id = m.customer_id)
         	join emp e on(m.emp_no=e.emp_no) 
         	join material_order_detail d on(m.mr_order_code=d.mr_order_code) 
         	join itemlist i on(d.item_code=i.item_code)
         	where d.mr_order_code = #{keyword}
  		
  		</select>	
  	
  	
  	
  	<!-- 반품 품질 리스트 -->
  		<select id="retGetList" resultType="QualityVO">
  		select q.test_code, 
  		
  		q.item_code,
  		q.mr_order_det_code,
  		GET_CODENAME(i.item_type) item_type,
  		i.item_name,
        e.emp_name,
  		q.situation,
  		q.end_date,
  		q.test_quantity,
  		q.err_quantity,
  		q.pass_quantity,
  		(q.err_quantity/q.test_quantity)*100 as error,
  		q.test_note 
  		from itemlist i 
  		join quality_test q on(i.item_code = q.item_code) 
        join emp e on (q.emp_no = e.emp_no)
  	     where test_note = '합격'
      
      and (q.err_quantity/q.test_quantity)*100 between 10 and 100
  		
  		</select>
  	
  	
  	
  	<!-- 반품 리스트 -->
  		<select id="returnGetList" resultType="MrReturnVO">
  			select r.mr_return_code,r.test_code,r.item_code,r.mr_return_count,r.mr_return_reason,r.mr_return_date,r.emp_no,c.customer_name,i.item_name
  			from material_return r join itemlist i on(r.item_code=i.item_code) join contract co on(i.item_code = co.item_code) join customer c on(co.customer_id=c.customer_id)
  		
  		
  		</select>
  
  
  	
  	<!-- 반품 등록 -->	
  		<select id="returnInsert" statementType="CALLABLE">
  			{call MR_RETURN(
  				#{testCode, mode=IN, jdbcType=VARCHAR},
  				#{itemCode, mode=IN, jdbcType=VARCHAR},
  				#{mrReturnCount, mode=IN, jdbcType=VARCHAR},
  				#{mrReturnReason, mode=IN, jdbcType=VARCHAR}
  				
  			)
  		}
  		</select>
  	
  	
  		
  	<!-- 반품 취소 -->
  		<select id="returnDel" statementType="CALLABLE">
  			{call mr_return_delete(
  				#{mrReturnCode, mode=IN, jdbcType=VARCHAR}	
  			
  			
  			)
  		}
  		
  		</select>	
  
  
  
  <!-- 반품 검색 조건 -->		
  		<sql id="returnSearch">
  			<where>
  			<if test=" customerName != null and customerName != ''.toString()">
                  	customer_name like '%'||#{customerName}||'%'
                  </if>
                  
                  <if test="itemName != null and itemName != ''.toString()">
                   	 and item_name like '%'||#{itemName}||'%'
                     
                  </if>
                  
                  <if test="mrReturnDate1 != null and mrReturnDate2 != null">
                  	 and MR_RETURN_DATE between #{mrReturnDate1} and #{mrReturnDate2}
                  	 
                  </if>
                  
  			
  			
  			
  			</where>
  		
  		
  		
  		</sql>
  		
  	<!-- 반품 검색 -->	
  		
  		
  		<select id="MrRetQuery" parameterType="MrReturnVO" resultType="MrReturnVO">
  			select r.mr_return_code,r.test_code,r.item_code,r.mr_return_count,r.mr_return_reason,r.mr_return_date,r.emp_no,c.customer_name,i.item_name
  			from material_return r join itemlist i on(r.item_code=i.item_code) join contract co on(i.item_code = co.item_code) join customer c on(co.customer_id=c.customer_id)
  		
  			<include refid="returnSearch"></include>
  		
  		</select>
  		
  		
  		
  	<!-- 자재 불량 리스트 -->
  		<select id="ErrorGetList" resultType="MrErrorVO">
  			
  			select * from material_error
	  		
  		</select>
  			
  </mapper>