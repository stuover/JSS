<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.mes.jss.production.mapper.WorkMapper">

	<!-- 작업지시 공통 등록 -->
	<select id="workCommonSave" statementType="CALLABLE" parameterType="WorkVO" resultType="WorkVO">
		
		{call WORK_INSERT(
				#{workName, mode=IN, jdbcType=VARCHAR},
				#{workDate, mode=IN, jdbcType=VARCHAR},
				#{empNo, mode=IN, jdbcType=VARCHAR},
				#{workId, mode=INOUT, jdbcType=VARCHAR, javaType=String}
				)
		}
		
	</select>
	
	
	<!-- 작업지시 세부 등록 -->
	<select id="workDetailSave" statementType="CALLABLE" parameterType="WorkVO" resultType="WorkVO">
	
		{call WDETAIL_INSERT(
				#{workId, mode=IN, jdbcType=VARCHAR},
				#{itemCode, mode=IN, jdbcType=VARCHAR},
				#{workAmount, mode=IN, jdbcType=VARCHAR},
				#{workStart, mode=IN, jdbcType=VARCHAR},
				#{workEnd, mode=IN, jdbcType=VARCHAR},
				#{pdetailId, mode=IN, jdbcType=VARCHAR},
				#{wdetailId, mode=INOUT, jdbcType=VARCHAR, javaType=String}
				)
		}
	
	</select>
	
	<!-- 작업지시 조회 모달창 : 초기값 -->
	<select id="workResult" resultType="WorkVO">
		<![CDATA[ 
			SELECT DISTINCT
				  work_id, 
				  work_name, 
				  work_date, 
				  emp_name,
			      TO_CHAR((SYSDATE - 3), 'yyyy-MM-dd') start_date,
			      TO_CHAR((SYSDATE + 3), 'yyyy-MM-dd') end_date  
			FROM (
				  SELECT 
						w.work_id,
						work_name, 
						work_date, 
						emp_name
				  FROM 
					  work w JOIN emp e 
								ON(w.emp_no = e.emp_no)
							 JOIN work_detail d 
								ON(w.work_id = d.work_id)
				  WHERE 
					   work_date >= (SYSDATE - 3)
				  )
			WHERE 
				 work_date <= (SYSDATE + 3)
		]]>
	</select>
	
	<!-- 작업지시 조회 모달창 : 검색결과 -->
	<select id="workSearchResult" parameterType="SearchVO" resultType="WorkVO">
		<![CDATA[ 
				SELECT 
					  work_id, 
					  work_name, 
					  work_date, 
					  emp_name
				FROM (
					  SELECT 
							w.work_id, 
							work_name, 
							work_date,  
							emp_name
					  FROM 
						  work w JOIN emp e 
									ON (w.emp_no = e.emp_no)
								 JOIN work_detail d 
									ON(w.work_id = d.work_id)
					  WHERE 
						   work_date >= TO_DATE(#{startTime}, 'yyyy-MM-dd')
					  )
				WHERE 
					 work_date <= TO_DATE(#{endTime}, 'yyyy-MM-dd')	
		]]>
	</select>
	
	
	<!-- 작업지시 관리 페이지 : 모달창에서 선택한 작업지시 세부내용 검색 결과 -->
	<select id="workSelectDetail" parameterType="WorkVO" resultType="WorkVO">
		SELECT 
		       w.wdetail_id, 
		       w.work_id, 
		       w.item_code,
		       i.item_name,
		       i.item_type,
		       w.work_amount, 
		       w.work_start, 
		       w.work_end, 
		       pdetail_id, 
		       NVL2(performance_id,'수정 불가', '수정 가능') AS "modifyOption"
		FROM 
		    work_detail w LEFT OUTER JOIN performance f ON(w.wdetail_id = f.wdetail_id)
		                  JOIN itemlist i ON (w.item_code = i.item_code)
		WHERE 
		    work_id = #{workId}
	</select>
	
	<!-- 제품명 더블클릭 -> 해당 제품의 BOM 정보 조회 -->
	<select id="itemBomInfo" parameterType="WorkVO" resultType="WorkVO">
	
		WITH d AS(     
				  SELECT  
						LEVEL,
						b.item_name,
						b.item_code,
						a.item_con,
						a.pro_code,
						c.pro_name,
						a.unit,
						a.pro_order
				  FROM 
					  bom a JOIN itemlist b
									  ON a.ing_code = b.item_code
						   JOIN process c
									  ON a.pro_code = c.pro_code 
				  WHERE
					   <if test="itemType.equals('SAM')">
						NOT
					   </if>  
					   a.item_type = '반제품' 
				  START WITH a.item_code = (SELECT item_code FROM work_detail WHERE wdetail_id =#{wdetailId})
				  CONNECT BY PRIOR a.bom_level = a.level_type
				  ORDER BY level, pro_order
		     ),
		     e AS (
		           SELECT item_code, sum(hold_count) AS hold_count
		           FROM hold_materials
		           WHERE wbom_id  IN(  SELECT wbom_id FROM work_bom WHERE wdetail_id =#{wdetailId})
		           GROUP BY item_code
		          )
		SELECT d.*, d.item_con*c.work_amount  work_amount,  e.hold_count
		FROM work_detail c , 
						 d LEFT OUTER JOIN e  on (d.item_code = e.item_code)
		  
		WHERE wdetail_id = #{wdetailId}
		ORDER BY pro_order

	</select>
	
	
	<!-- 작업지시 공통 및 상세 삭제 -->
	<insert id="workDelete" statementType="CALLABLE" parameterType="WorkVO">
		{call WORK_DELETE(
			#{workId, mode=IN, jdbcType=VARCHAR}			
			)
		}
	</insert>
	
	<!-- HOLD 등록 모달창 : HOLD 처리할 자재 정보 -->
	<select id="selectHoldMaterial" parameterType="WorkVO" resultType="WorkVO">
		SELECT * FROM 
			(
			SELECT 
				  item_name, 
				  hold_lot mr_lot_number, 
				  hold_count current_count , 
				  hold_count
			FROM 
				 hold_materials h JOIN work_bom w ON (h.wbom_id = w.wbom_id)
								  JOIN itemlist i ON (h.item_code = i.item_code)
			WHERE 
				 wdetail_id = #{wdetailId}
			 AND h.item_code = #{itemCode}
		
			UNION
		
			SELECT 
				  item_name, 
				  mr_lot_number, 
				  (store_count - hold_count) current_count , 
				  0
			FROM 
				 material m JOIN itemlist i ON (m.item_code = i.item_code)
			WHERE 
				 m.item_code = #{itemCode}
			)
		ORDER BY hold_count DESC

	</select>
	
	
	<!-- HOLD 등록 모달창 : 지시공정정보 등록 -->
	<select id="workBomInsert" statementType="CALLABLE" parameterType="WorkVO" resultType="WorkVO">
		{call WORK_BOM_INSERT(
			#{wdetailId, mode=IN, jdbcType=VARCHAR},
			#{itemType, mode=IN, jdbcType=VARCHAR},
			#{itemCode, mode=IN, jdbcType=VARCHAR}
			)
		}
	</select>
	
	<!-- HOLD 등록 모달창 : 홀드자재 등록 -->
	<select id="holdMaterialInsert" statementType="CALLABLE" parameterType="WorkVO" resultType="WorkVO">
		{call HOLD_MATERIALS_INSERT(
			#{wdetailId, mode=IN, jdbcType=VARCHAR},
			#{proCode, mode=IN, jdbcType=VARCHAR},
			#{itemCode, mode=IN, jdbcType=VARCHAR},
			#{mrLotNumber, mode=IN, jdbcType=VARCHAR},
			#{holdCount, mode=IN, jdbcType=BIGINT}
			)
		}
	</select>
	
	<!-- HOLD 등록 모달창 : 자재 홀드 수량 더해주기 -->
	<select id="holdMaterialAdd"  statementType="CALLABLE" parameterType="WorkVO" resultType="WorkVO">
		{call HOLD_COUNT_ADD(
			#{holdCount, mode=IN, jdbcType=BIGINT},
			#{mrLotNumber, mode=IN, jdbcType=VARCHAR}
			)
		}
	</select>
	
	
	<!-- HOLD 등록 모달창 : 홀드자재 삭제 -->
	<select id="holdMaterialDelete" statementType="CALLABLE" parameterType="WorkVO" resultType="WorkVO">
		{call HOLD_MATERIALS_DELETE(
			#{wdetailId, mode=IN, jdbcType=VARCHAR},
			#{proCode, mode=IN, jdbcType=VARCHAR},
			#{itemCode, mode=IN, jdbcType=VARCHAR}
			)
		}
	</select>
	
	<!-- HOLD 등록 모달창 : 자재 홀드 수량 빼주기 -->
	<select id="holdMaterialMinus" statementType="CALLABLE" parameterType="WorkVO" resultType="WorkVO">
		{call HOLD_COUNT_MINUS(
			#{holdCount, mode=IN, jdbcType=BIGINT},
			#{mrLotNumber, mode=IN, jdbcType=VARCHAR}
			)
		}
	</select>
	
	<!-- 공정이동표 조회 페이지 -->
	<!-- 작업지시 조회 모달 : 초기값 -->
	<select id="proMoveWorkModalList" parameterType="WorkVO" resultType="WorkVO">
		<![CDATA[
			SELECT work_id, work_name, work_date, emp_name
			FROM (
			        SELECT w.work_id , work_name, work_date, emp_name
			        FROM work_detail d JOIN work w ON (d.work_id = w.work_id)
			                           JOIN performance P ON (d.wdetail_id = p.wdetail_id)
			                           JOIN emp e ON(w.emp_no = e.emp_no)
			        WHERE end_time IS NOT NULL
			          AND work_date > TRUNC(SYSDATE - 3)     
			      )
			WHERE work_date < TRUNC(SYSDATE + 3)
		]]>
	</select>
		
	<!-- 작업지시 조회 모달 : 검색 결과 -->
	<select id="proMoveWorkModalResult" parameterType="WorkVO" resultType="WorkVO">
		<![CDATA[
			SELECT work_id, work_name, work_date, emp_name
			FROM (
			        SELECT w.work_id , work_name, work_date, emp_name
			        FROM work_detail d JOIN work w ON (d.work_id = w.work_id)
			                           JOIN performance P ON (d.wdetail_id = p.wdetail_id)
			                           JOIN emp e ON(w.emp_no = e.emp_no)
			        WHERE end_time IS NOT NULL
			          AND work_date > TO_DATE(#{startTime}, 'yyyy-MM-dd')     
			      )
			WHERE work_date < TO_DATE(#{endTime}, 'yyyy-MM-dd')
		]]>
	</select>
	
	<select id="processCurrInfo" parameterType="PerformanceVO" resultType="PerformanceVO">
		SELECT 
			  f.wdetail_id, 
			  f.wbom_id, 
			  b.pro_code, 
			  pro_name, 
			  f.item_code, 
			  item_name, 
			  f.output, 
			  f.pass_item, 
			  f.fail_item, 
			  worker
		FROM 
			performance f JOIN work_bom b ON(f.wbom_id =b.wbom_id)
		                  JOIN itemlist i ON (f.item_code = i.item_code)
		                  JOIN process p ON (p.pro_code = b.pro_code)
		WHERE f.wdetail_id = #{wdetailId}
		  AND f.end_time IS NOT NULL
	</select>
	
  	
  </mapper>