<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
  <mapper namespace="com.mes.jss.basic.mapper.CustomerMapper">
  
  	<select id="getCustomerList" resultType="CustomerVO">
  		select  customer_id,
  				customer_name,
  				cust_addr,
  				cust_mail,
  				cust_tel,
  				GET_CODENAME(cust_part) cust_part,
  				contract_status,
  				cust_etc
  		from customer
  		order by customer_id
  			
  	</select>
  	
  	<update id="updateCus" parameterType="CustomerVO">
  		update customer 
  		set    customer_name = #{customerName},
  			   cust_addr = #{custAddr},
  			   cust_mail = #{custMail},
  			   cust_tel = #{custTel},
  			   cust_Part = #{custPart},
  			   contract_status = #{contractStatus},
  			   cust_etc = #{custEtc}
  		where customer_id = #{customerId}
  	</update>
  	
  	<insert id="insertTrans" parameterType="TransactionItemVO">
  	
  		insert into CONTRACT
  		values ('TRY' || to_char(sysdate, 'yyMMdd') || lpad( (SELECT NVL(MAX(substr(CONTRACT_ID, -4)),0)+1 FROM CONTRACT), 4, '0' ),  #{itemCode}, to_date(sysdate, 'yyyy/MM/dd'), #{customerId})

  	</insert>
  	
  	<select id="getCusItemList" resultType="TransactionItemVO">
  		select a.item_code, b.item_name, GET_CODENAME(b.item_type) item_type
  		from  CONTRACT a join itemList b
  			  on(a.item_code = b.item_code)
  		where customer_id = #{cusId}
  	</select>
  	
  	<select id="result" resultType="int">
  		select count(*) from CONTRACT where item_code = #{itemCode} and customer_id = #{customerId}
  	</select>
  	
  	<delete id="deleteitemDeta">
  		delete
  		from CONTRACT 
  		where item_code = #{itemCode}
  		and customer_id = #{customerId}
  	</delete>
  	
  	<insert id="insertCustomer" parameterType="CustomerVO">
  	
  		<selectKey keyProperty="customerId" resultType="String" order="BEFORE">
  			select deta_code from DETAILS_COMM where deta_name =  GET_CODENAME(#{custPart})
  		</selectKey>
  		
  		insert into customer 
  		(CUSTOMER_ID,
		 CUSTOMER_NAME,
		 CUST_ADDR,
		 CUST_MAIL,
		 CUST_TEL,
		 CUST_PART,
		 CONTRACT_STATUS,
		 CUST_ETC)	
  		values(#{customerId} || to_char(sysdate, 'yyMMdd') ||  lpad( (select nvl(max(to_number(substr(CUSTOMER_ID, -4))),0)+1 from CUSTOMER), 4, '0') ,
  			   #{customerName},
  			   #{custAddr},
  			   #{custMail},
  			   #{custTel},
  			   #{custPart},
  			   #{contractStatus},
  			   #{custEtc})
  	</insert>
  	
  	<select id="getCustomer" resultType="CustomerVO">
  		select * from customer where substr(customer_id, 4) = (select Max(substr(customer_id, 4)) from  CUSTOMER)
  	</select>

  </mapper>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  